{"version":3,"sources":["Components/TableCell.jsx","Components/TableRow.jsx","Components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableCell","props","handleClick","setState","colorSelected","state","className","style","backgroundColor","this","onClick","Component","TableRow","Array","numCols","fill","Table","class","numRows","App","addRow","addCol","delCol","delRow","handleChange","event","target","name","value","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAGqBA,G,uDACnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAKRC,YAAc,WACZ,EAAKC,SAAS,CAACC,cAAc,EAAKH,MAAMG,iBALxC,EAAKC,MAAQ,CACXD,cAAe,IAHD,E,qDAWhB,OACE,qBAAKE,UAAU,OAAOC,MAAO,CAACC,gBAAiBC,KAAKJ,MAAMD,eAAgBM,QAASD,KAAKP,kB,GAbvDS,cCAxB,SAASC,EAAUX,GAChC,OACE,qBAAKK,UAAU,MAAf,SACGO,MAAMZ,EAAMa,SAASC,KAAK,cAAC,EAAD,CAAWX,cAAeH,EAAMG,mBCHlD,SAASY,EAAOf,GAC7B,OACE,uBAAOgB,MAAM,SAAb,SACGJ,MAAMZ,EAAMiB,SAASH,KAAK,cAACH,EAAD,CAAUE,QAASb,EAAMa,QAASV,cAAeH,EAAMG,mB,ICFlEe,E,kDACpB,WAAYlB,GAAO,IAAD,8BAChB,cAAMA,IAQRmB,OAAS,WACP,EAAKjB,SAAS,CAAEe,QAAS,EAAKb,MAAMa,QAAU,KAV9B,EAalBG,OAAS,WACP,EAAKlB,SAAS,CAAEW,QAAS,EAAKT,MAAMS,QAAU,KAd9B,EAiBlBQ,OAAS,WACH,EAAKjB,MAAMS,QAAU,GACvB,EAAKX,SAAS,CAAEW,QAAS,EAAKT,MAAMS,QAAU,KAnBhC,EAsBlBS,OAAS,WACH,EAAKlB,MAAMa,QAAU,GACvB,EAAKf,SAAS,CAAEe,QAAS,EAAKb,MAAMa,QAAU,KAxBhC,EA2BlBM,aAAe,SAACC,GACd,EAAKtB,SAAL,eAAgBsB,EAAMC,OAAOC,KAAO,CAACF,EAAMC,OAAOE,UA1BlD,EAAKvB,MAAQ,CACXS,QAAS,EACTI,QAAS,EACTd,cAAe,IALD,E,qDAgChB,OACE,sBAAKE,UAAU,MAAf,UACE,qBAAKA,UAAU,MAAf,SACE,+BACE,wBAAQW,MAAM,MAAMP,QAASD,KAAKY,OAAlC,uBACA,wBAAQJ,MAAM,MAAMP,QAASD,KAAKW,OAAlC,0BACA,wBAAQH,MAAM,MAAMP,QAASD,KAAKa,OAAlC,0BACA,wBAAQL,MAAM,MAAMP,QAASD,KAAKc,OAAlC,6BACA,yBAAQN,MAAM,YAAYU,KAAK,gBAAgBE,SAAUpB,KAAKe,aAA9D,UACE,wBAAQI,MAAM,GAAd,0BACA,wBAAQA,MAAM,UAAd,kBACA,wBAAQA,MAAM,UAAd,oBACA,wBAAQA,MAAM,UAAd,mBACA,wBAAQA,MAAM,UAAd,kBACA,wBAAQA,MAAM,UAAd,oBACA,wBAAQA,MAAM,UAAd,4BAIN,cAACZ,EAAD,CAAOE,QAAST,KAAKJ,MAAMa,QAASJ,QAASL,KAAKJ,MAAMS,QAASV,cAAeK,KAAKJ,MAAMD,uB,GApDhEO,aCQpBmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7f123069.chunk.js","sourcesContent":["import { Component } from 'react';\nimport \"../App.css\"\n\nexport default class TableCell extends Component{ \n  constructor(props){\n    super(props)\n    this.state = {\n      colorSelected: \"\"\n    }\n  }\n  handleClick = () => {\n    this.setState({colorSelected:this.props.colorSelected })\n    \n  }\n  render(){\n    return (\n      <div className=\"cell\" style={{backgroundColor: this.state.colorSelected}} onClick={this.handleClick}>\n      </div>\n    )\n  }\n}\n","import TableCell from './TableCell';\nimport '../App.css';\n\nexport default function TableRow (props) {\n  return (\n    <div className=\"row\">\n      {Array(props.numCols).fill(<TableCell colorSelected={props.colorSelected}/>)}\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport TableRow from './TableRow'\n\nexport default function Table (props){\n  return (\n    <table class=\"center\">\n      {Array(props.numRows).fill(<TableRow numCols={props.numCols} colorSelected={props.colorSelected}/>)}\n    </table>\n  )\n}","import './App.css';\nimport { Component } from 'react';\nimport { Table } from './Components';\n\nexport default class  App  extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      numCols: 5,\n      numRows: 5, \n      colorSelected: \"\"\n    }\n  }\n\n  addRow = () => {\n    this.setState({ numRows: this.state.numRows + 1})\n  }\n\n  addCol = () => {\n    this.setState({ numCols: this.state.numCols + 1})\n  }\n\n  delCol = () => {\n    if (this.state.numCols > 0) \n      this.setState({ numCols: this.state.numCols - 1})\n  }\n\n  delRow = () => {\n    if (this.state.numRows > 0) \n      this.setState({ numRows: this.state.numRows - 1})\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.name]: [event.target.value]})\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"bar\">\n          <ul >\n            <button class=\"btn\" onClick={this.addCol}> Add Row </button>\n            <button class=\"btn\" onClick={this.addRow}> Add Column </button>\n            <button class=\"btn\" onClick={this.delCol}> Remove Row </button>\n            <button class=\"btn\" onClick={this.delRow}> Remove Column </button>\n            <select class=\"drop-down\" name=\"colorSelected\" onChange={this.handleChange}> \n              <option value=\"\">Select Color</option>\n              <option value=\"#78DCE8\">Blue</option>\n              <option value=\"#FFD866\">Yellow</option>\n              <option value=\"#A9DC76\">Green</option>\n              <option value=\"#FF6188\">Pink</option>\n              <option value=\"#FC9867\">Orange</option>\n              <option value=\"#AB9DF2\">Purple</option> \n            </select>\n          </ul>\t\n        </div>\n        <Table numRows={this.state.numRows} numCols={this.state.numCols} colorSelected={this.state.colorSelected}/>\n      </div>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}